/*--------------------------------------------------------------------
  Time Integration and Nonlinear Solvers
  Hands-on Lessons with SUNDIALS + AMReX
  2019 Argonne Training Program in Extreme-Scale Computing

  Authors (alphabetical):
    David Gardner (gardner48@llnl.gov)
    John Loffeld (loffeld1@llnl.gov)
    Daniel Reynolds (reynolds@smu.edu)
    Donald Willcox (dewillcox@lbl.gov)

  --------------------------------------------------------------------
  Implementation file for 'general' SUNDIALS interface ARKode, with
  many configuration options) for 2D Advection-Diffusion
  example problem.
  --------------------------------------------------------------------*/

#include <AMReX_PlotFileUtil.H>
#include <AMReX_ParmParse.H>
#include <AMReX_Print.H>
#include <AMReX_Sundials.H>

#include <arkode/arkode_arkstep.h>
#include <sunlinsol/sunlinsol_spgmr.h>
#include <sunnonlinsol/sunnonlinsol_fixedpoint.h>

#include "amrex_sundials_advection_diffusion.h"

using namespace amrex;

void ComputeSolutionARK(N_Vector nv_sol, ProblemOpt* prob_opt,
                        ProblemData* prob_data)
{
   // Extract problem data and options
   Geometry* geom         = prob_data->geom;
   int       plot_int     = prob_opt->plot_int;
   int       arkode_order = prob_opt->arkode_order;
   int       nls_method   = prob_opt->nls_method;
   int       nls_max_iter = prob_opt->nls_max_iter;
   int       nls_fp_acc   = prob_opt->nls_fp_acc;
   int       ls_max_iter  = prob_opt->ls_max_iter;
   int       rhs_adv      = prob_opt->rhs_adv;
   int       rhs_diff     = prob_opt->rhs_diff;
   Real      rtol         = prob_opt->rtol;
   Real      atol         = prob_opt->atol;
   Real      fixed_dt     = prob_opt->fixed_dt;
   Real      tfinal       = prob_opt->tfinal;
   Real      dtout        = prob_opt->dtout;
   int       max_steps    = prob_opt->max_steps;
   int       write_diag   = prob_opt->write_diag;
   int use_preconditioner = prob_opt->use_preconditioner;

   // initial time, number of outputs, and error flag
   Real time = 0.0;
   int  nout = ceil(tfinal/dtout);
   int  ier  = 0;

   // Write a plotfile of the initial data
   if (plot_int > 0)
   {
      const std::string& pltfile = amrex::Concatenate("plt", 0, 5);
      MultiFab* sol = amrex::sundials::N_VGetVectorPointer_MultiFab(nv_sol);
      WriteSingleLevelPlotfile(pltfile, *sol, {"u"}, *geom, time, 0);
   }

   // Create the ARK stepper
   void* arkode_mem = nullptr;

   if (rhs_adv > 0 && rhs_diff > 0)
   {
      if (rhs_adv > 1 && rhs_diff > 1)
      {
         // explicit advection and diffusion
         arkode_mem = ARKStepCreate(ComputeRhsAdvDiff, nullptr, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
      else if (rhs_adv > 1)
      {
         // explicit advection and implicit diffusion
         arkode_mem = ARKStepCreate(ComputeRhsAdv, ComputeRhsDiff, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
      else if (rhs_diff > 1)
      {
         // implicit advection and explicit diffusion
         arkode_mem = ARKStepCreate(ComputeRhsDiff, ComputeRhsAdv, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
      else
      {
         // implicit advection and diffusion
         arkode_mem = ARKStepCreate(nullptr, ComputeRhsAdvDiff, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
   }
   else if (rhs_adv > 0)
   {
      if (rhs_adv > 1)
      {
         // explicit advection
         arkode_mem = ARKStepCreate(ComputeRhsAdv, nullptr, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
      else
      {
         // implicit advection
         arkode_mem = ARKStepCreate(nullptr, ComputeRhsAdv, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
   }
   else if (rhs_diff > 0)
   {
      if (rhs_diff > 1)
      {
         // explicit diffusion
         arkode_mem = ARKStepCreate(ComputeRhsDiff, nullptr, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
      else
      {
         // implicit diffusion
         arkode_mem = ARKStepCreate(nullptr, ComputeRhsDiff, time, nv_sol,
                                    *amrex::sundials::The_Sundials_Context());
      }
   }
   else
   {
      amrex::Print() << "Invalid RHS options for ARKode" << std::endl;
      return;
   }

   // Attach the user data structure to ARKStep
   ARKStepSetUserData(arkode_mem, prob_data);

   // Set the method order
   ARKStepSetOrder(arkode_mem, arkode_order);

   // Set the time step size or integration tolerances
   if (fixed_dt > 0.0)
      ARKStepSetFixedStep(arkode_mem, fixed_dt);
   else
      ARKStepSStolerances(arkode_mem, atol, rtol);

   // Set the max number of steps between outputs
   ARKStepSetMaxNumSteps(arkode_mem, max_steps);

   // Set file for writing ARKStep diagnostics
   FILE* diagfp = nullptr;
   if (write_diag) {
      diagfp = fopen("ARKStep_diagnostics.txt", "w");
      ARKStepSetDiagnostics(arkode_mem, diagfp);
   }

   // Attach nonlinear/linear solvers as needed
   if (rhs_adv == 1 || rhs_diff == 1)
   {
      if (nls_method == 0)
      {
         // Create and attach GMRES linear solver for Newton
         SUNLinearSolver LS;
         if (use_preconditioner)
            LS = SUNLinSol_SPGMR(nv_sol, PREC_LEFT, ls_max_iter,
                                 *amrex::sundials::The_Sundials_Context());
         else
            LS = SUNLinSol_SPGMR(nv_sol, PREC_NONE, ls_max_iter,
                                 *amrex::sundials::The_Sundials_Context());

         ier = ARKStepSetLinearSolver(arkode_mem, LS, nullptr);
         if (ier != ARKLS_SUCCESS)
         {
            amrex::Print() << "Creation of linear solver unsuccessful" << std::endl;
            return;
         }

         if (use_preconditioner) {
            // Attach preconditioner setup/solve functions
            ier = ARKStepSetPreconditioner(arkode_mem, precondition_setup, precondition_solve);
            if (ier != ARKLS_SUCCESS)
            {
               amrex::Print() << "Attachment of preconditioner unsuccessful" << std::endl;
               return;
            }
         }
      }
      else
      {
         // Create and attach GMRES linear solver (if implicit and using Newton)
         SUNNonlinearSolver NLS =
            SUNNonlinSol_FixedPoint(nv_sol, nls_fp_acc,
                                    *amrex::sundials::The_Sundials_Context());
         ier = ARKStepSetNonlinearSolver(arkode_mem, NLS);
         if (ier != ARK_SUCCESS)
         {
            amrex::Print() << "Creation of nonlinear solver unsuccessful" << std::endl;
            return;
         }
      }

      // Set max number of nonlinear iterations
      ier = ARKStepSetMaxNonlinIters(arkode_mem, nls_max_iter);
      if (ier != ARK_SUCCESS)
      {
         amrex::Print() << "Error setting max number of nonlinear iterations" << std::endl;
         return;
      }
   }

   // Advance the solution in time
   Real tout = time + dtout; // first output time
   Real tret;                // return time
   for (int iout=0; iout < nout; iout++)
   {
      ier = ARKStepEvolve(arkode_mem, tout, nv_sol, &tret, ARK_NORMAL);
      if (ier < 0)
      {
         amrex::Print() << "Error in ARKStepEvolve" << std::endl;
         return;
      }

      // Get integration stats
      long nfe_evals, nfi_evals;
      ARKStepGetNumRhsEvals(arkode_mem, &nfe_evals, &nfi_evals);
      amrex::Print() << "t = " << std::setw(5) << tret
                     << "  explicit evals = " << std::setw(7) << nfe_evals
                     << "  implicit evals = " << std::setw(7) << nfi_evals
                     << std::endl;

      // Write output
      if (plot_int > 0)
      {
         const std::string& pltfile = amrex::Concatenate("plt", iout+1, 5);
         MultiFab* sol = amrex::sundials::N_VGetVectorPointer_MultiFab(nv_sol);
         WriteSingleLevelPlotfile(pltfile, *sol, {"u"}, *geom, tret, iout+1);
      }

      // Update output time
      tout += dtout;
      if (tout > tfinal) tout = tfinal;
   }

   // Output final solution statistics
   long int nst, nst_a, nfe, nfi, nsetups, nli, nJv, nlcf, nni, ncfn, netf, npe, nps;
   nst = nst_a = nfe = nfi = nsetups = nli = nJv = nlcf = nni = ncfn = netf = npe = nps = 0;
   ARKStepGetNumSteps(arkode_mem, &nst);
   ARKStepGetNumStepAttempts(arkode_mem, &nst_a);
   ARKStepGetNumRhsEvals(arkode_mem, &nfe, &nfi);
   ARKStepGetNumErrTestFails(arkode_mem, &netf);
   ARKStepGetNumNonlinSolvIters(arkode_mem, &nni);
   ARKStepGetNumNonlinSolvConvFails(arkode_mem, &ncfn);
   if (nls_method == 0) {
      ARKStepGetNumLinSolvSetups(arkode_mem, &nsetups);
      ARKStepGetNumLinIters(arkode_mem, &nli);
      ARKStepGetNumJtimesEvals(arkode_mem, &nJv);
      ARKStepGetNumLinConvFails(arkode_mem, &nlcf);
      ARKStepGetNumPrecEvals(arkode_mem, &npe);
      ARKStepGetNumPrecSolves(arkode_mem, &nps);
   }
   amrex::Print() << "\nFinal Solver Statistics:\n"
                  << "   Internal solver steps = " << nst << " (attempted = " << nst_a << ")\n"
                  << "   Total RHS evals:  Fe = " << nfe << ",  Fi = " << nfi << "\n"
                  << "   Total number of nonlinear iterations = " << nni << "\n"
                  << "   Total number of nonlinear solver convergence failures = " << ncfn << "\n"
                  << "   Total number of error test failures = " << netf << "\n";
   if (nls_method == 0) {
     amrex::Print() << "   Total linear solver setups = " << nsetups << "\n"
                    << "   Total linear iterations = " << nli << "\n"
                    << "   Total number of Jacobian-vector products = " << nJv << "\n"
                    << "   Total number of linear solver convergence failures = " << nlcf << "\n";
     if ((npe != 0) || (nps != 0))
       amrex::Print() << "   Total number of Preconditioner setups = " << npe << "\n"
                      << "   Total number of Preconditioner solves = " << nps << "\n";
   }


   // Close diagnostics file
   if (write_diag)
      fclose(diagfp);
}


void ParseInputs(ProblemOpt& prob_opt, ProblemData& prob_data)
{
   // ParmParse is way of reading inputs from the inputs file
   ParmParse pp;

   // --------------------------------------------------------------------------
   // Problem options
   // --------------------------------------------------------------------------

   // Enable (>0) or disable (<0) writing output files
   int plot_int = -1; // plots off
   pp.query("plot_int", plot_int);
   prob_opt.plot_int = plot_int;

   // Specify the ARKode method order
   int arkode_order = 4; // 4th order
   pp.query("arkode_order", arkode_order);
   prob_opt.arkode_order = arkode_order;

   // Specify the nonlinear solver
   int nls_method = 0; // Newton
   pp.query("nls_method", nls_method);
   prob_opt.nls_method = nls_method;

   // Specify the max number of nonlinear iterations
   int nls_max_iter = 3;
   pp.query("nls_max_iter", nls_max_iter);
   prob_opt.nls_max_iter = nls_max_iter;

   // Specify the number of fixed point acceleration vectors
   int nls_fp_acc = 3; // no acceleration
   pp.query("nls_fp_acc", nls_fp_acc);
   prob_opt.nls_fp_acc = nls_fp_acc;

   // Specify the max number of linear iterations
   int ls_max_iter = 5;
   pp.query("ls_max_iter", ls_max_iter);
   prob_opt.ls_max_iter = ls_max_iter;

   // Specify RHS functions/splitting
   int rhs_adv  = 1; // implicit advection
   int rhs_diff = 1; // implicit diffusion
   pp.query("rhs_adv", rhs_adv);
   pp.query("rhs_diff", rhs_diff);
   prob_opt.rhs_adv  = rhs_adv;
   prob_opt.rhs_diff = rhs_diff;

   // Specify relative and absolute tolerances
   Real rtol = 1.0e-4;
   Real atol = 1.0e-9;
   pp.query("rtol", rtol);
   pp.query("atol", atol);
   prob_opt.rtol = rtol;
   prob_opt.atol = atol;

   // Specify a fixed time step size
   Real fixed_dt = -1.0; // diabled by default (use adaptive steps)
   pp.query("fixed_dt", fixed_dt);
   prob_opt.fixed_dt = fixed_dt;

   // Specify final time for integration
   Real tfinal = 1.0e4;
   pp.query("tfinal", tfinal);
   prob_opt.tfinal = tfinal;

   // Specify output frequency
   Real dtout = tfinal;
   pp.query("dtout", dtout);
   prob_opt.dtout = dtout;

   // Specify maximum number of steps between outputs
   int max_steps = 1000;
   pp.query("max_steps", max_steps);
   prob_opt.max_steps = max_steps;

   // Output integrator diagnostics to a file
   int write_diag = 1;
   pp.query("write_diag", write_diag);
   prob_opt.write_diag = write_diag;

   // Decide whether to use a preconditioner or not
   int use_preconditioner = 0;
   pp.query("use_preconditioner", use_preconditioner);
   if (nls_method==0)
     prob_opt.use_preconditioner = use_preconditioner;

   // --------------------------------------------------------------------------
   // Problem data
   // --------------------------------------------------------------------------

   // The number of cells on each side of a square domain.
   int n_cell = 256;
   pp.query("n_cell", n_cell);
   prob_data.n_cell = n_cell;

   // The domain is broken into boxes of size max_grid_size
   int max_grid_size = 64;
   pp.query("max_grid_size", max_grid_size);
   prob_data.max_grid_size = max_grid_size;

   // Advection coefficients
   Real advCoeffx = 5.0e-4;
   Real advCoeffy = 2.5e-4;
   pp.query("advCoeffx", advCoeffx);
   pp.query("advCoeffy", advCoeffy);
   prob_data.advCoeffx = advCoeffx;
   prob_data.advCoeffy = advCoeffy;

   // Diffusion coefficients
   Real diffCoeffx = 1.0e-6;
   Real diffCoeffy = 1.0e-6;
   pp.query("diffCoeffx", diffCoeffx);
   pp.query("diffCoeffy", diffCoeffy);
   prob_data.diffCoeffx = diffCoeffx;
   prob_data.diffCoeffy = diffCoeffy;

   // MLMG options
   ParmParse ppmg("mlmg");
   prob_data.mg_agglomeration = 1;
   ppmg.query("agglomeration", prob_data.mg_agglomeration);
   prob_data.mg_consolidation = 1;
   ppmg.query("consolidation", prob_data.mg_consolidation);
   prob_data.mg_max_coarsening_level = 1000;
   ppmg.query("max_coarsening_level", prob_data.mg_max_coarsening_level);
   prob_data.mg_linop_maxorder = 2;
   ppmg.query("linop_maxorder", prob_data.mg_linop_maxorder);
   prob_data.mg_max_iter = 1000;
   ppmg.query("max_iter", prob_data.mg_max_iter);
   prob_data.mg_max_fmg_iter = 1000;
   ppmg.query("max_fmg_iter", prob_data.mg_max_fmg_iter);
   prob_data.mg_verbose = 0;
   ppmg.query("verbose", prob_data.mg_verbose);
   prob_data.mg_bottom_verbose = 0;
   ppmg.query("bottom_verbose", prob_data.mg_bottom_verbose);
   prob_data.mg_use_hypre = 1;
   ppmg.query("use_hypre", prob_data.mg_use_hypre);
   prob_data.mg_hypre_interface = 3;
   ppmg.query("hypre_interface", prob_data.mg_hypre_interface);
   prob_data.mg_use_petsc = 0;
   ppmg.query("use_petsc", prob_data.mg_use_petsc);
   prob_data.mg_tol_rel = 1.0e-6;
   ppmg.query("tol_rel", prob_data.mg_tol_rel);

   // Ouput problem options and parameters
   amrex::Print()
      << "n_cell        = " << n_cell        << std::endl
      << "max_grid_size = " << max_grid_size << std::endl
      << "plot_int      = " << plot_int      << std::endl
      << "arkode_order  = " << arkode_order << std::endl
      << "rhs_adv       = " << rhs_adv  << std::endl
      << "rhs_diff      = " << rhs_diff << std::endl;
   if (fixed_dt > 0.0)
      amrex::Print()
         << "fixed_dt      = " << fixed_dt << std::endl;
   else
      amrex::Print()
         << "rtol          = " << rtol << std::endl
         << "atol          = " << atol << std::endl;
   amrex::Print()
      << "tfinal        = " << tfinal        << std::endl
      << "dtout         = " << dtout         << std::endl
      << "write_diag    = " << write_diag    << std::endl;
   if (rhs_adv > 0)
      amrex::Print()
         << "advCoeffx     = " << advCoeffx << std::endl
         << "advCoeffy     = " << advCoeffy << std::endl;
   if (rhs_diff > 0)
      amrex::Print()
         << "diffCoeffx    = " << diffCoeffx << std::endl
         << "diffCoeffy    = " << diffCoeffy << std::endl;
   if ((rhs_adv > 0) && (rhs_diff > 0) && (rhs_adv != rhs_diff))
     if (rhs_diff > 1) {
      amrex::Print() << "ImEx treatment: implicit advection and explicit diffusion" << std::endl;
     } else {
      amrex::Print() << "ImEx treatment: implicit diffusion and explicit advection" << std::endl;
     }
   if (use_preconditioner)
      amrex::Print()
        << "preconditioning enabled" << std::endl
        << "  mlmg.agglomeration        = " << prob_data.mg_agglomeration << std::endl
        << "  mlmg.consolidation        = " << prob_data.mg_consolidation << std::endl
        << "  mlmg.max_coarsening_level = " << prob_data.mg_max_coarsening_level << std::endl
        << "  mlmg.linop_maxorder       = " << prob_data.mg_linop_maxorder << std::endl
        << "  mlmg.max_iter             = " << prob_data.mg_max_iter << std::endl
        << "  mlmg.max_fmg_iter         = " << prob_data.mg_max_fmg_iter << std::endl
        << "  mlmg.verbose              = " << prob_data.mg_verbose << std::endl
        << "  mlmg.bottom_verbose       = " << prob_data.mg_bottom_verbose << std::endl
        << "  mlmg.use_hypre            = " << prob_data.mg_use_hypre << std::endl
        << "  mlmg.hypre_interface      = " << prob_data.mg_hypre_interface << std::endl
        << "  mlmg.use_petsc            = " << prob_data.mg_use_petsc << std::endl
        << "  mlmg.tol_rel              = " << prob_data.mg_tol_rel << std::endl;

}


int main(int argc, char* argv[])
{
   amrex::Initialize(argc,argv);

   DoProblem();

   amrex::Finalize();
   return 0;
}


void DoProblem()
{
   // What time is it now?  We'll use this to compute total run time.
   Real strt_time = amrex::second();

   // Set problem data and options
   ProblemData prob_data;
   ProblemOpt  prob_opt;
   ParseInputs(prob_opt, prob_data);

   // Make BoxArray and Geometry
   BoxArray ba;
   Geometry geom;
   SetUpGeometry(ba, geom, prob_data);

   // How Boxes are distrubuted among MPI processes
   DistributionMapping dm(ba);
   prob_data.dmap = &dm;

   // Allocate the solution MultiFab
   int nGhost = 1;  // number of ghost cells for each array
   int nComp  = 1;  // number of components for each array
   MultiFab sol(ba, dm, nComp, nGhost);

   // Allocate the linear solver coefficient MultiFabs
   MultiFab acoef(ba, dm, nComp, nGhost);
   MultiFab bcoef(ba, dm, nComp, nGhost);
   acoef = 1.0;
   bcoef = 1.0;
   prob_data.acoef = &acoef;
   prob_data.bcoef = &bcoef;

   // Build the flux MultiFabs
   Array<MultiFab, AMREX_SPACEDIM> flux;
   for (int dir = 0; dir < AMREX_SPACEDIM; dir++)
   {
      // flux(dir) has one component, zero ghost cells, and is nodal in
      // direction dir
      BoxArray edge_ba = ba;
      edge_ba.surroundingNodes(dir);
      flux[dir].define(edge_ba, dm, 1, 0);
   }
   prob_data.flux = &flux;

   // Create an N_Vector wrapper for the solution MultiFab
   sunindextype length = nComp * prob_data.n_cell * prob_data.n_cell;
   N_Vector nv_sol     = amrex::sundials::N_VMake_MultiFab(length, &sol);

   // Set the initial condition
   FillInitConds2D(sol, geom);

   // Integrate in time
   ComputeSolutionARK(nv_sol, &prob_opt, &prob_data);

   // Call the timer again and compute the maximum difference between the start
   // time and stop time over all processors
   Real stop_time = amrex::second() - strt_time;
   const int IOProc = ParallelDescriptor::IOProcessorNumber();
   ParallelDescriptor::ReduceRealMax(stop_time, IOProc);

   // Tell the I/O Processor to write out the "run time"
   amrex::Print() << "Run time = " << stop_time << std::endl;
}


/*--------------------------------------------------------------------
  Time Integration and Nonlinear Solvers
  Hands-on Lessons with SUNDIALS + AMReX
  2019 Argonne Training Program in Extreme-Scale Computing

  Authors (alphabetical):
    David Gardner (gardner48@llnl.gov)
    John Loffeld (loffeld1@llnl.gov)
    Daniel Reynolds (reynolds@smu.edu)
    Donald Willcox (dewillcox@lbl.gov)

  --------------------------------------------------------------------
  Implementation file for general utility routines shared between
  hands-on lessons.
  --------------------------------------------------------------------*/

#include <AMReX_PlotFileUtil.H>
#include <AMReX_ParmParse.H>
#include <AMReX_Print.H>

#include <cvode/cvode.h>
#include <arkode/arkode_arkstep.h>
#include <sunlinsol/sunlinsol_spgmr.h>
#include <sunnonlinsol/sunnonlinsol_fixedpoint.h>

#include "Utilities.h"

#include "NVector_Multifab.h"



using namespace amrex;

void FillInitConds2D(MultiFab& sol, const Geometry& geom)
{
   const auto dx = geom.CellSize();
   const auto prob_lo = geom.ProbLo();
   const auto prob_hi = geom.ProbHi();

   Real sigma = 0.1;
   Real a = 1.0/(sigma*sqrt(2*M_PI));
   Real b = -0.5/(sigma*sigma);

   for (MFIter mfi(sol); mfi.isValid(); ++mfi)
   {
      const Box& bx = mfi.validbox();
      Array4<Real> const& fab = sol.array(mfi);
      const auto lo = lbound(bx);
      const auto hi = ubound(bx);
      for (int j = lo.y; j <= hi.y; ++j) {
         Real y = prob_lo[1] + (((Real) j) + 0.5) * dx[1];

         for (int i = lo.x; i <= hi.x; ++i) {
            Real x = prob_lo[0] + (((Real) i) + 0.5) * dx[0];

            Real r = x*x + y*y;
            fab(i,j,0,0) = a * exp(b*r);
         }
      }
   }
}

void SetUpGeometry(BoxArray& ba, Geometry& geom, ProblemData& prob_data)
{
   // Extract problem options
   int n_cell = prob_data.n_cell;
   int max_grid_size = prob_data.max_grid_size;

   IntVect dom_lo(AMREX_D_DECL(       0,        0,        0));
   IntVect dom_hi(AMREX_D_DECL(n_cell-1, n_cell-1, n_cell-1));
   Box domain(dom_lo, dom_hi); // cell-centered

   // Initialize the boxarray "ba" from the single box "domain"
   ba.define(domain);

   // Break up boxarray "ba" into chunks no larger than "max_grid_size" along a
   // direction
   ba.maxSize(max_grid_size);

   // This defines the physical box, [-1,1] in each direction.
   RealBox real_box({AMREX_D_DECL(-1.0, -1.0, -1.0)},
                    {AMREX_D_DECL(1.0, 1.0, 1.0)});

   // This defines a Geometry object
   Vector<int> is_periodic(AMREX_SPACEDIM, 1);  // periodic in all direction
   geom.define(domain, &real_box, CoordSys::cartesian, is_periodic.data());

   prob_data.geom = &geom;
   prob_data.grid = &ba;
}


/* ---------------------------------------------------------------------------
 * SUNDIALS RHS functions
 * ---------------------------------------------------------------------------*/

int ComputeRhsAdv(Real t, N_Vector nv_sol, N_Vector nv_rhs, void* data)
{
   // extract MultiFabs
   MultiFab* sol = NV_MFAB(nv_sol);
   MultiFab* rhs = NV_MFAB(nv_rhs);

   // extract problem data
   ProblemData *prob_data = (ProblemData*) data;
   Geometry* geom = prob_data->geom;
   Real advCoeffx = prob_data->advCoeffx;
   Real advCoeffy = prob_data->advCoeffy;

   // clear the RHS
   *rhs = 0.0;

   // fill ghost cells
   sol->FillBoundary(geom->periodicity());

   // compute advection
   ComputeAdvectionUpwind(*sol, *rhs, *geom, 0, advCoeffx, advCoeffy);

   return 0;
}

int ComputeRhsDiff(Real t, N_Vector nv_sol, N_Vector nv_rhs, void* data)
{
   // extract MultiFabs
   MultiFab* sol = NV_MFAB(nv_sol);
   MultiFab* rhs = NV_MFAB(nv_rhs);

   // extract problem data
   ProblemData *prob_data = (ProblemData*) data;
   Geometry* geom = prob_data->geom;
   Array<MultiFab, AMREX_SPACEDIM>& flux = *(prob_data->flux);
   Real diffCoeffx = prob_data->diffCoeffx;
   Real diffCoeffy = prob_data->diffCoeffy;

   // fill ghost cells
   sol->FillBoundary(geom->periodicity());

   // clear the RHS
   *rhs = 0.0;

   // compute diffusion
   ComputeDiffusion(*sol, *rhs, flux[0], flux[1], *geom, 0,
                    diffCoeffx, diffCoeffy);

   return 0;
}

int ComputeRhsAdvDiff(Real t, N_Vector nv_sol, N_Vector nv_rhs, void* data)
{
   // extract MultiFabs
   MultiFab* sol = NV_MFAB(nv_sol);
   MultiFab* rhs = NV_MFAB(nv_rhs);

   // extract problem data
   ProblemData *prob_data = (ProblemData*) data;
   Geometry* geom = prob_data->geom;
   Array<MultiFab, AMREX_SPACEDIM>& flux = *(prob_data->flux);
   Real advCoeffx = prob_data->advCoeffx;
   Real advCoeffy = prob_data->advCoeffy;
   Real diffCoeffx = prob_data->diffCoeffx;
   Real diffCoeffy = prob_data->diffCoeffy;

   // clear the RHS
   *rhs = 0.0;

   // fill ghost cells
   sol->FillBoundary(geom->periodicity());

   // compute advection
   ComputeAdvectionUpwind(*sol, *rhs, *geom, 0, advCoeffx, advCoeffy);

   // compute diffusion
   ComputeDiffusion(*sol, *rhs, flux[0], flux[1], *geom, 0,
                    diffCoeffx, diffCoeffy);

   return 0;
}

/* ---------------------------------------------------------------------------
 * Advection RHS functions
 * ---------------------------------------------------------------------------*/

// Assumes ghost cells already filled
// Adds result to adv_mf MultiFab
void ComputeAdvectionUpwind(MultiFab& sol_mf, MultiFab& adv_mf, Geometry& geom,
                            int comp, Real advCoeffx, Real advCoeffy)
{
   const auto dx = geom.CellSize();
   Real dxInv = 1.0 / dx[0]; // assume same over entire mesh
   Real dyInv = 1.0 / dx[1]; // assume same over entire mesh
   Real sideCoeffx = advCoeffx * dxInv;
   Real sideCoeffy = advCoeffy * dyInv;

   int c = comp;  // for brevity
   for (MFIter mfi(sol_mf); mfi.isValid(); ++mfi)
   {
      const Box& bx = mfi.validbox();
      Array4<Real> const& sol_fab = sol_mf.array(mfi);
      Array4<Real> const& adv_fab = adv_mf.array(mfi);
      const auto lo = lbound(bx);
      const auto hi = ubound(bx);

      // x-direction
      if (advCoeffx > 0) {
         for (int j = lo.y; j <= hi.y; ++j) {
            for (int i = lo.x; i <= hi.x; ++i) {
               adv_fab(i,j,0,c) -= sideCoeffx * (sol_fab(i,j,0,c) - sol_fab(i-1,j,0,c));
            }
         }
      } else {
         for (int j = lo.y; j <= hi.y; ++j) {
            for (int i = lo.x; i <= hi.x; ++i) {
               adv_fab(i,j,0,c) -= sideCoeffx * (sol_fab(i+1,j,0,c) - sol_fab(i,j,0,c));
            }
         }
      }

      // y-direction
      if (advCoeffy > 0) {
         for (int j = lo.y; j <= hi.y; ++j) {
            for (int i = lo.x; i <= hi.x; ++i) {
               adv_fab(i,j,0,c) -= sideCoeffy * (sol_fab(i,j,0,c) - sol_fab(i,j-1,0,c));
            }
         }
      } else {
         for (int j = lo.y; j <= hi.y; ++j) {
            for (int i = lo.x; i <= hi.x; ++i) {
               adv_fab(i,j,0,c) -= sideCoeffy * (sol_fab(i,j+1,0,c) - sol_fab(i,j,0,c));
            }
         }
      }
   }
}


/* ---------------------------------------------------------------------------
 * Diffusion RHS functions
 * ---------------------------------------------------------------------------*/

// Assumes ghots cells are already filled
// Adds result to diff_mf
void ComputeDiffusion(MultiFab& sol, MultiFab& diff_mf, MultiFab& fx_mf,
                      MultiFab& fy_mf, Geometry& geom, int comp,
                      Real diffCoeffx, Real diffCoeffy)
{
   ComputeDiffFlux(sol, fx_mf, fy_mf, geom, comp, diffCoeffx, diffCoeffy);
   ComputeDivergence(diff_mf, fx_mf, fy_mf, geom, comp);
}

// Assumes ghost cells already filled
// Overwrites fx_mf and fy_mf MultiFabs
void ComputeDiffFlux(MultiFab& sol_mf, MultiFab& fx_mf, MultiFab& fy_mf,
                     Geometry& geom, int comp, Real diffCoeffx, Real diffCoeffy)
{
   const auto dx = geom.CellSize();
   Real dxInv = 1.0 / dx[0]; // assume same over entire mesh
   Real dyInv = 1.0 / dx[1]; // assume same over entire mesh
   Real coeffX = diffCoeffx * dxInv;
   Real coeffY = diffCoeffy * dyInv;

   int c = comp;  // for brevity
   for (MFIter mfi(sol_mf); mfi.isValid(); ++mfi)
   {
      const Box& bx = mfi.validbox();
      Array4<Real> const& sol = sol_mf.array(mfi);
      Array4<Real> const& fx = fx_mf.array(mfi);
      Array4<Real> const& fy = fy_mf.array(mfi);
      const auto lo = lbound(bx);
      const auto hi = ubound(bx);

      // x-flux
      for (int j = lo.y; j <= hi.y; ++j) {
         for (int i = lo.x; i <= hi.x+1; ++i) {
            // always use zero component for flux
            fx(i,j,0,0) = coeffX * (sol(i,j,0,c) - sol(i-1,j,0,c));
         }
      }

      // y-flux
      for (int j = lo.y; j <= hi.y+1; ++j) {
         for (int i = lo.x; i <= hi.x; ++i) {
            // always use zero component for flux
            fy(i,j,0,0) = coeffY * (sol(i,j,0,c) - sol(i,j-1,0,c));
         }
      }
   }
}

// Assumes ghost cells already filled
// Adds result to div_mf MultiFab
void ComputeDivergence(MultiFab& div_mf, MultiFab& fx_mf,
                       MultiFab& fy_mf, Geometry& geom, int comp)
{
   const auto dx = geom.CellSize();
   Real dxInv = 1.0 / dx[0]; // assume same over entire mesh
   Real dyInv = 1.0 / dx[1]; // assume same over entire mesh

   int c = comp;  // for brevity
   for (MFIter mfi(div_mf); mfi.isValid(); ++mfi)
   {
      const Box& bx = mfi.validbox();
      Array4<Real> const& div = div_mf.array(mfi);
      Array4<Real> const& fx = fx_mf.array(mfi);
      Array4<Real> const& fy = fy_mf.array(mfi);
      const auto lo = lbound(bx);
      const auto hi = ubound(bx);

      for (int j = lo.y; j <= hi.y; ++j) {
         for (int i = lo.x; i <= hi.x; ++i) {
            // always use zero component for flux
            div(i,j,0,c) += dxInv * (fx(i+1,j,0,0) - fx(i,j,0,0)) +
                            dyInv * (fy(i,j+1,0,0) - fy(i,j,0,0));
         }
      }
   }
}

/* ---------------------------------------------------------------------------
 * Preconditioning routines
 * ---------------------------------------------------------------------------*/

int precondition_setup(realtype tn, N_Vector u, N_Vector fu,
                       booleantype jok, booleantype *jcurPtr,
                       realtype gamma, void *user_data)
{
  return(0);
}

int precondition_solve(realtype tn, N_Vector u, N_Vector fu,
                       N_Vector r, N_Vector z,
                       realtype gamma, realtype delta,
                       int lr, void *user_data)
{
  ProblemData *prob_data = (ProblemData*) user_data;

  auto geom = *(prob_data->geom);
  auto grid = *(prob_data->grid);
  auto dmap = *(prob_data->dmap);
  auto& acoef = *(prob_data->acoef);
  auto& bcoef = *(prob_data->acoef);

  MultiFab* solution = NV_MFAB(z);
  MultiFab* rhs = NV_MFAB(r);

  LPInfo info;
  info.setAgglomeration(prob_data->mg_agglomeration);
  info.setConsolidation(prob_data->mg_consolidation);
  info.setMaxCoarseningLevel(prob_data->mg_max_coarsening_level);

  const Real tol_rel = 1.e-10;
  const Real tol_abs = 0.0;

  const int nlevels = 1;

  const Real ascalar = 1.0;
  const Real bscalar = gamma;

  MLABecLaplacian mlabec({geom}, {grid}, {dmap}, info);

  mlabec.setMaxOrder(prob_data->mg_linop_maxorder);

  // Set periodic BC
  mlabec.setDomainBC({AMREX_D_DECL(LinOpBCType::Periodic,
                                   LinOpBCType::Periodic,
                                   LinOpBCType::Periodic)},
    {AMREX_D_DECL(LinOpBCType::Periodic,
                  LinOpBCType::Periodic,
                  LinOpBCType::Periodic)});

  mlabec.setLevelBC(0, nullptr);

  mlabec.setScalars(ascalar, bscalar);

  mlabec.setACoeffs(0, acoef);

  Array<MultiFab,AMREX_SPACEDIM> face_bcoef;
  for (int idim = 0; idim < AMREX_SPACEDIM; ++idim)
    {
      const BoxArray& ba = amrex::convert(bcoef.boxArray(),
                                          IntVect::TheDimensionVector(idim));
      face_bcoef[idim].define(ba, bcoef.DistributionMap(), 1, 0);

      switch (idim)
         {
            case 0:
               face_bcoef[idim] = prob_data->diffCoeffx;
            case 1:
               face_bcoef[idim] = prob_data->diffCoeffy;
         }
    }

  mlabec.setBCoeffs(0, amrex::GetArrOfConstPtrs(face_bcoef));

  MLMG mlmg(mlabec);
  mlmg.setMaxIter(prob_data->mg_max_iter);
  mlmg.setMaxFmgIter(prob_data->mg_max_fmg_iter);
  mlmg.setVerbose(prob_data->mg_verbose);
  mlmg.setBottomVerbose(prob_data->mg_bottom_verbose);
#ifdef AMREX_USE_HYPRE
  if (prob_data->mg_use_hypre) {
    mlmg.setBottomSolver(MLMG::BottomSolver::hypre);
    if (prob_data->mg_hypre_interface == 1)
       mlmg.setHypreInterface(amrex::Hypre::Interface::structed);
    else if (prob_data->mg_hypre_interface == 2)
       mlmg.setHypreInterface(amrex::Hypre::Interface::semi_structed);
    else
       mlmg.setHypreInterface(amrex::Hypre::Interface::ij);
  }
#endif
#ifdef AMREX_USE_PETSC
  if (prob_data->mg_use_petsc) {
    mlmg.setBottomSolver(MLMG::BottomSolver::petsc);
  }
#endif

  mlmg.solve({solution}, {rhs}, prob_data->mg_tol_rel, tol_abs);

  return(0);
}
